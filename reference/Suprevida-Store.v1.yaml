openapi: 3.0.0
info:
  title: Suprevida Store
  version: '1.0'
  contact:
    name: Leandro Cavalcante da Rocha
    url: www.linkedin.com/in/leandror3
    email: leandrocdarocha@gmail.com
servers:
  - url: 'http://localhost:3000/api/store/v1'
paths:
  '/users/{userId}':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Get User Info
      tags:
        - users
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: bbde4839-2cfe-4e85-b9f2-202bb4f791d7
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          $ref: '#/components/responses/Error404'
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      tags:
        - users
      summary: Update User
      operationId: patch-users-userId
      responses:
        '204':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: c02ea2f4-74d8-4027-8895-60af96eb1852
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
      description: Update the information of an existing user. Only admins can update users.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
      security:
        - bearerAuth: []
  /users:
    post:
      summary: Create/Update User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: dcb6ef4c-396a-49d6-9628-2f67b42bba78
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Create Admin User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  admin: true
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user or update an existing one. Only admins can create new users.
      security:
        - bearerAuth: []
      tags:
        - users
    parameters: []
  /products:
    get:
      summary: List Products
      tags:
        - products
      responses:
        '200':
          description: Product Retrieved
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  type: object
                  properties:
                    productId:
                      type: string
                      format: uuid
                  required:
                    - productId
              examples:
                Two products:
                  value:
                    - productId: dcd53ddb-8104-4e48-8cc0-5df1088c6113
                    - productId: 2dd1b84f-6f0a-472e-a878-6f067fc2fc05
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          headers: {}
        '401':
          $ref: '#/components/responses/Error401'
      operationId: get-products
      security:
        - bearerAuth: []
      parameters: []
      description: List all available products.
    post:
      summary: Create/Update Product
      operationId: post-products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                description: UUID that identifies a product
        '204':
          description: Product updated
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
      description: |-
        Create a new product, or update an existing one. This product can have a picture, passed on the field "image".
        Only admins can post products.
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product-Image'
            examples:
              Simple product:
                value:
                  id: 2dd1b84f-6f0a-472e-a878-6f067fc2fc05
                  title: Seringa 5 ml
                  price: 0.15
                  category: seringa
                  image: string
                  stateCode: SP
                  desciption: Seringa 5 ml xiamoi
        description: ''
      tags:
        - products
    patch:
      summary: Update Product
      operationId: patch-products
      description: |-
        Add one or more new product(s). This product can have a picture, passed on the field "image". Only the informed fields will be updated.
        Only admins can patch products.
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product-Image'
        description: ''
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - products
  '/products/{productId}':
    parameters:
      - $ref: '#/components/parameters/productId'
    get:
      summary: Get Product Info
      tags:
        - products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      operationId: get-products-id
      description: Get detailed information for a single product
    delete:
      summary: Delete Product
      operationId: delete-products-productId
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
      description: |-
        Delete a product from the system.
        Only admins can delete products.
      security: []
      tags:
        - products
    patch:
      summary: Update Product
      operationId: patch-products-id
      description: |-
        Update a single product. This product can have a picture, passed on the field "image". Only the informed fields will be updated.
        Only admins can patch products.
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product-Image'
        description: ''
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - products
    post:
      summary: Create Product
      operationId: post-products-id
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
      description: |-
        Update an existing product.
        Only admins can edit products.
      tags:
        - products
  '/users/{userId}/carts':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: List carts
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
              examples:
                Two products:
                  value:
                    - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                      products:
                        - productId: dcd53ddb-8104-4e48-8cc0-5df1088c6113
                          quantity: 0
                        - productId: 28e62f9a-5034-49c9-b300-8cb7d59f048f
                          quantity: 0
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-users-id-carts
      security:
        - bearerAuth: []
      description: 'Retrieve the shopping carts that belongs to {userId}'
    post:
      summary: Create/update cart
      operationId: post-users-id-carts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
      description: 'Create/update a specific shopping cart that belongs to {userId}'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
            examples:
              Three items:
                value:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                  products:
                    - productId: dcd53ddb-8104-4e48-8cc0-5df1088c6113
                      quantity: 5
                    - productId: 4fdef69e-b54f-45fb-ac2a-c8bddd66439a
                      quantity: 1
                    - productId: 2861e4a0-c948-47b3-a785-8f6eb2880fb9
                      quantity: 50
        description: ''
      tags:
        - users
    put:
      summary: Update cart
      operationId: put-users-id-carts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 'Update a specific shopping cart that belongs to user {userId}. If the informad cart does not exist, it will return a 400 bad request status. The cart will be updated to reflect the products and quantities informed. A product with quantity "0" will be removed from the cart. If a product is not informed, it will be deleted.'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
            examples:
              One product:
                value:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                  products:
                    - productId: dcd53ddb-8104-4e48-8cc0-5df1088c6113
                      quantity: 3
        description: ''
      tags:
        - users
    patch:
      summary: Update cart
      operationId: patch-users-id-carts
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 'Update a specific shopping cart that belongs to user {userId}. If the informad cart does not exist, it will return a 400 bad request status. Only the informed items will be updated in the cart. A product with quantity "0" will be removed from the cart.'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
            examples:
              Add one item:
                value:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                  products:
                    - productId: dcd53ddb-8104-4e48-8cc0-5df1088c6113
                      quantity: 0
              Remove one item:
                value:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                  products:
                    - productId: dcd53ddb-8104-4e48-8cc0-5df1088c6113
                      quantity: 0
        description: ''
      tags:
        - users
    delete:
      summary: Delete cart
      operationId: delete-users-id-carts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 'Delete a shopping cart that belongs to user {userId}'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
            examples:
              example-1:
                value:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                  products:
                    - productId: dcd53ddb-8104-4e48-8cc0-5df1088c6113
                      quantity: 0
        description: ''
      tags:
        - users
  '/users/{userId}/products':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: List available products
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      operationId: get-users-id-products
      description: 'Get the list of products that can be bought by user {userId}. This takes in consideration the user''s state. The state will be determined by the user''s current geolocation, found with the latitude and longitude informed.'
      parameters:
        - schema:
            type: number
            format: double
          in: query
          name: latitude
          description: Client location's latitude
          required: true
        - schema:
            type: number
            format: double
          in: query
          name: longitude
          description: Client location's longitude
          required: true
      security:
        - bearerAuth: []
  '/users/{userId}/products/{productId}/image/{imageId}':
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/productId'
      - $ref: '#/components/parameters/imageId'
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            image/*:
              schema:
                type: string
                format: binary
      operationId: get-users-id-products-id-image-id
      description: 'Retrieves a product''s image. '
      security:
        - bearerAuth: []
      parameters: []
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          admin: true
      properties:
        id:
          type: string
          description: Unique identifier for the given user.
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        admin:
          type: boolean
      required:
        - firstName
        - lastName
        - email
    Product:
      title: Product
      type: object
      description: Basic store product
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        price:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: false
        category:
          type: string
        imageCode:
          type: string
        stateCode:
          type: string
        desciption:
          type: string
      required:
        - title
        - price
        - category
        - stateCode
    Error:
      description: ''
      type: object
      properties:
        error:
          type: string
          minLength: 1
        message:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - error
        - message
        - detail
      x-examples: {}
    Cart:
      title: Cart
      type: object
      x-examples: {}
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        products:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                format: uuid
              quantity:
                type: integer
            required:
              - productId
              - quantity
      required:
        - userId
    Product-Image:
      title: Product
      type: object
      description: Basic store product
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        price:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: false
        category:
          type: string
        image:
          type: string
          format: binary
        stateCode:
          type: string
        desciption:
          type: string
      required:
        - title
        - price
        - category
        - stateCode
  securitySchemes:
    bearerAuth:
      type: oauth2
      flows: {}
  responses:
    Error400:
      description: There is a problem with the request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Error401:
      description: Please authenticate first.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Error403:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Error404:
      description: Entity not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  examples: {}
  parameters:
    userId:
      name: userId
      in: path
      schema:
        type: string
        format: uuid
      description: UUID that identifies an user
      required: true
    productId:
      name: productId
      in: path
      schema:
        type: string
        format: uuid
      description: UUID that identifies a product
      required: true
    imageId:
      name: imageId
      in: path
      required: true
      schema:
        type: string
      description: UUID that identifies an image
security:
  - API Key - 1: []
